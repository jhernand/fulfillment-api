//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package events.v1;

import "events/v1/event_type.proto";
import "google/api/annotations.proto";

message EventsWatchRequest {
  // Filter criteria.
  //
  // The value of this parameter is a [CEL](https://cel.dev) boolean expression. The `event` variable will contain the
  // fields of the event. If the result of the expression is `true` then the event will be sent by the server. For
  // example, to receive only the events that indicate that a cluster order has been modified and is now in the
  // fulfilled state:
  //
  // ```
  // event.type == EVENT_TYPE_OBJECT_CREATED && event.cluster_order.status.state == CLUSTER_ORDER_STATE_FULFILLED
  // ```
  //
  // If this isn't provided, or if the value is empty, then all the events that the user has permission to see will be
  // sent by the server.
  optional string filter = 1;
}

message EventsWatchResponse {
  Event event = 1;
}

service Events {
  // Start watching events.
  //
  // Note that the server doesn't make any guarantee about the delivery or order of these events. In particular events
  // that happen while the client is disconnected will not be delivered. Clients should consider using other mechanisms
  // to ensure that they process objects correctly. For example, they can combine this watch mechanism with periodic
  // redconciliation of all the objects.
  rpc Watch(EventsWatchRequest) returns (stream EventsWatchResponse) {
    option (google.api.http) = {get: "/api/events/v1/events"};
  }
}
