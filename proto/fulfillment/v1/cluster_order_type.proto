//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

syntax = "proto3";

package fulfillment.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "shared/v1/condition_status_type.proto";

// Contains the details that the user provides to request the provisioning of a cluster, as well as the current status
// of the order provided by the system.
message ClusterOrder {
  // Unique identifier of the order.
  //
  // This will be automatically generated by the system when the order is placed.
  string id = 1;

  ClusterOrderSpec spec = 2;
  ClusterOrderStatus status = 3;
}

// Contains the details that the user provides to request the provisioning of the cluster.
message ClusterOrderSpec {
  // Reference to the cluster template.
  //
  // This is mandatory, and must be the value of the `id` field of one of the cluster templates.
  string template_id = 1;

  // Values of the template parameters.
  //
  // When using the HTTP+JSON version of the API the values must be represented as documented in the (ProtoJSON format
  // document)[https://protobuf.dev/programming-guides/json]. For example, if the template has a `number_of_nodes`
  // parameter of integer type, the complete order should be represented like this:
  //
  // ```json
  // {
  //   "template_id": "123",
  //   "template_parameters": {
  //     "number_of_nodes": {
  //       "@type": "type.googleapis.com/google.protobuf.Int32Value",
  //       "value": 42
  //     }
  //   }
  // }
  // ```
  //
  // The possible values of the `@type` are the same as those used by the `type_url` field of the `Any` type:
  //
  // | Type                           | Value                                             |
  // |--------------------------------|---------------------------------------------------|
  // | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
  // | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
  // | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
  // | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
  // | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
  // | String                         | `type.googleapis.com/google.protobuf.StringValue` |
  // | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
  // | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
  // | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
  // | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |
  map<string, google.protobuf.Any> template_parameters = 2;
}

// Contains the current status of the order.
message ClusterOrderStatus {
  // Indicates the overall state of the order.
  //
  // For more details check the conditions.
  ClusterOrderState state = 1;

  // Contains a list of conditions that describe in detail the status of the order.
  //
  // For example, an order that failed could be represented like this (when converted to JSON):
  //
  //    {
  //      "id": "123",
  //      "spec": {
  //        "template_id": "245"
  //      },
  //      "state": "CLUSTER_ORDER_STATE_FAILED",
  //      "status": {
  //        "conditions": [
  //          {
  //            "type: "CLUSTER_ORDER_CONDITION_TYPE_ACCEPTED",
  //            "status": "CONDITION_STATUS_TRUE",
  //            "last_transition_time": "2025-03-12 20:15:59+00:00",
  //            "message": "The order has been automatically approved"
  //          },
  //          {
  //            "type": "CLUSTER_ORDER_CONDITION_TYPE_FULFILLED",
  //            "status": "CONDITION_STATUS_FALSE",
  //            "last_transition_time": "2025-03-12 20:17:16+00:00"
  //          },
  //          {
  //            "type": "CLUSTER_ORDER_CONDITION_TYPE_FAILED",
  //            "status": "CONDITION_STATUS_TRUE",
  //            "last_transition_time": "2025-03-12 20:18:59+00:00",
  //            "reason": "DnsProvisioningFailure",
  //            "message": "Failed to create DNS domain 'example.com' because it already exists"
  //          }
  //        ]
  //      }
  //    }
  //
  // In this example the `ACCEPTED` condition is true. That tells us that the order was accepted, and the details tell
  // us that it was automatically approved.
  //
  // The `FUFILLED` condition isn't false. That means that order isn't fulfilled, without any other detail.
  //
  // The `FAILED` condition is true, so it is telling us that the fulfillment failed. It also gives additional detail
  // in the with both a _reason_ intended for use by programs, and some some details to help humans understand and debug
  // the issue.
  //
  // Note that in this example, to make it shorter, only three conditions appear. In general all the conditions (except
  // `UNPSECIFIED`) will appear exactly once.
  //
  // Note also that this is just an example, in particular the `DnsProvisioningFailure` reason for the failed condition
  // is imaginary. Check the documentation of the values of the `ClusterOrderConditionType` enumerated type to see
  // possible values for the reason.
  repeated ClusterOrderCondition conditions = 2;

  // Reference to the resulting cluster.
  //
  // This will be automatically populated by the system when the requested cluster is completely provisoned. Further
  // details about the cluster, like the API URL, will be available in the corresponding `Cluster` object.
  string cluster_id = 3;
}

// Represents the overall state of the order.
enum ClusterOrderState {
  // Unspecified indicates that the state is unknown.
  CLUSTER_ORDER_STATE_UNSPECIFIED = 0;

  // Indicates that the order isn't completelly fulfilled yet.
  CLUSTER_ORDER_STATE_PROGRESSING = 1;

  // Indicates indicates that the order has been successfully fulfilled.
  //
  // The details of the resulting cluster will be available in the `cluster` object indicated by the `status.cluster_id`
  // field.
  CLUSTER_ORDER_STATE_FULFILLED = 2;

  // Indicates that fulfillment of the order failed.
  CLUSTER_ORDER_STATE_FAILED = 3;
}

// Contains the details of a condition that describes the status of a cluster order.
message ClusterOrderCondition {
  // Indicates the type of condition.
  ClusterOrderConditionType type = 1;

  // Indicates status of the condition.
  shared.v1.ConditionStatus status = 2;

  // This time is the last time that the condition was updated.
  google.protobuf.Timestamp last_transition_time = 3;

  // Contains a the reason of the condition in a format suitable for use by programs.
  //
  // The possible are documented in the `ClusterOrderConditionType` object.
  optional string reason = 4;

  // Contains a text giving more details of the condition. This will usually be progress reports, or error messages, and
  // are intended for use by humans, to debug problems.
  optional string message = 5;
}

// Types of conditions used to describe a cluster order.
enum ClusterOrderConditionType {
  // Unspecified indicates that the condition unknown.
  //
  // This will never be appear in the `spec.conditions` field of a order.
  CLUSTER_ORDER_CONDITION_TYPE_UNSPECIFIED = 0;

  // Accepted indicates that the order has been accepted by the system.
  CLUSTER_ORDER_CONDITION_TYPE_ACCEPTED = 1;

  // Rejected indicates that the order has been rejected by the system, so no further processing will be fulfill it.
  CLUSTER_ORDER_CONDITION_TYPE_REJECTED = 2;

  // Canceled indicates that the order has been canceled by the user.
  CLUSTER_ORDER_CONDITION_TYPE_CANCELED = 3;

  // Fulfilled indicates that the order has been successfully fulfilled.
  //
  // The details of the resulting cluster will be available in the `cluster` object indicated by the `status.cluster_id`
  // field.
  CLUSTER_ORDER_CONDITION_TYPE_FULFILLED = 4;

  // Failed indicates that fulfillment of the order failed.
  //
  // Currently there are no sepcific `reason` values defined.
  CLUSTER_ORDER_CONDITION_TYPE_FAILED = 5;
}
